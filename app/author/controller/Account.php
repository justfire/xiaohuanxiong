<?php


namespace app\author\controller;


use app\BaseController;
use app\model\SystemUsers;
use think\db\exception\DataNotFoundException;
use think\db\exception\ModelNotFoundException;
use think\facade\View;

class Account extends BaseController
{
    protected $jieqi_ver;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->jieqi_ver = floatval(config('site.jieqi_ver'));
    }

    public function register()
    {
        if (request()->isPost()) {
            $captcha = input('captcha');
            if (!captcha_check($captcha)) {
                return ['err' => 1, 'msg' => '验证码错误'];
            }
            $data = request()->param();
            $validate = new \app\validate\User();
            if ($validate->check($data)) {
                $map = array();
                $map[] = ['uname', '=', trim($data['uname'])];
                $map[] = ['groupid', '=', 6];
                $password = trim($data['password']);
                try {
                    $author = SystemUsers::where($map)->findOrFail();
                    return json(['err' => 1, 'msg' => '用户名已存在']);
                } catch (ModelNotFoundException $exception) {
                    $author = new SystemUsers();
                    $author->uname = trim($data['uname']);
                    $author->email = trim($data['email']);
                    $author->name = trim($data['name']);
                    //生成5位数的dwzkey
                    $key_str = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
                    $salt = substr(str_shuffle($key_str), mt_rand(0, strlen($key_str) - 11), 5);
                    $author->salt = $salt;
                    $author->groupid = 6;
                    $author->state = 0;
                    if ($this->jieqi_ver >= 2.4) {
                        $author->pass = md5(md5($data['password']) . $salt);
                    } else {
                        $author->pass = md5(trim($data['password']) . $salt);
                    }
                    $result = $author->save();
                    if ($result) {
                        return json(['err' => 0, 'msg' => '注册成功，请登录']);
                    } else {
                        return json(['err' => 1, 'msg' => '注册失败，请尝试重新注册']);
                    }
                }
            } else {
                return json(['err' => 1, 'msg' => $validate->getError()]);
            }
        } else {
            View::assign([
                'site_name' => config('site.site_name')
            ]);
            return view();
        }
    }

    public function login()
    {
        if (request()->isPost()) {
            $captcha = input('captcha');
            if (!captcha_check($captcha)) {
                return ['code' => 0, 'err' => 1, 'msg' => '验证码错误'];
            }
            $map = array();
            $map[] = ['uname', '=', trim(input('uname'))];
            $map[] = ['groupid', '=', 6];
            $password = trim(input('password'));
            try {
                $author = SystemUsers::where($map)->findOrFail();
                if ($this->jieqi_ver >= 2.4) {
                    $passsalt = md5(md5($password) . $author['salt']);
                } else {
                    $passsalt = md5($password . $author['salt']);
                }
                if ($passsalt != $author['pass']) {
                    return json(['err' => 1, 'msg' => '密码错误']);
                }
                if ($author->state == 0) {
                    return json(['err' => 1, 'msg' => '用户被锁定']);
                }
                $author->lastlogin = time();
                $author->save();
                session('xwx_author_id', $author->uid);
                session('xwx_author', $author->uname);
                session('xwx_author_name', $author->name);
                return json(['err' => 0, 'msg' => '登录成功']);
            } catch (ModelNotFoundException $e) {
                return json(['code' => 0, 'err' => 1, 'msg' => '不存在该用户']);
            }
        } else {

            View::assign([
                'site_name' => config('site.site_name'),
            ]);
            return view();
        }
    }

    public function logout()
    {
        session('xwx_author_id', null);
        session('xwx_author', null);
        session('xwx_author_name', null);
        $this->redirect('/login');
    }


    public function captcha()
    {
        ob_clean();
        return captcha();
    }
}